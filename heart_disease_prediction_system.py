# -*- coding: utf-8 -*-
"""heart disease prediction system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JiFF18LK4BAIPR_uhraWKK8RBts1SCD8
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""data collection and processing"""

heart_data = pd.read_csv('/content/heart_disease_uci.csv')

heart_data.head()

heart_data.tail()

# number of rows and columns
heart_data.shape

# getting some info about data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

heart_data['trestbps'].fillna(heart_data['trestbps'].median(), inplace=True)
heart_data['chol'].fillna(heart_data['chol'].median(), inplace=True)

print(heart_data.isnull().sum())

heart_data.dropna(inplace=True)

heart_data.describe()

heart_data['num'].value_counts()

"""feature engineering"""

X = heart_data.drop(columns='num', axis=1)
y = heart_data['num']

# Identify categorical columns
categorical_cols = X.select_dtypes(include='object').columns

# Apply one-hot encoding to categorical columns
X_encoded = pd.get_dummies(X, columns=categorical_cols, drop_first=True)

X = heart_data[['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalch', 'exang', 'oldpeak', 'slope', 'ca', 'thal']]
X

print(y)

"""splitting the data into training and test daat"""

X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, stratify=y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

model = LogisticRegression(max_iter=1000) # Increased max_iter for convergence
model.fit(X_train, y_train)

#accuracy
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, y_train)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, y_test)
print("Test Accuracy:", test_data_accuracy)

"""building a prediction  system"""

input_data = (63, 1, 3, 145, 233, 1, 2, 150, 0, 2.3, 2, 0.0, 1)

# Create a DataFrame from the input data with the original column names
input_df = pd.DataFrame([input_data], columns=['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalch', 'exang', 'oldpeak', 'slope', 'ca', 'thal'])

# Identify categorical columns in the input data
categorical_cols_input = input_df.select_dtypes(include='object').columns

# Apply one-hot encoding to categorical columns in the input data
input_encoded = pd.get_dummies(input_df, columns=categorical_cols_input, drop_first=True)

# Align columns with the training data - add missing columns and reorder
# Use reindex to ensure the same columns and order as X_encoded
input_aligned = input_encoded.reindex(columns=X_encoded.columns, fill_value=0)


# Make prediction
prediction = model.predict(input_aligned)

# Interpret result
if prediction[0] == 0:
    print("The person is NOT likely to have heart disease.")
else:
    print("The person IS likely to have heart disease.")

